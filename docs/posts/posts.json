[
  {
    "path": "posts/2022-02-10-workwithmedievalnetworks/",
    "title": "Work with Medieval Networks",
    "description": "A Brief Analysis of Networks of Medieval Conflict.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-10",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nBriefly Describe the Dataset You Are Using:\nQuestion: Identify initial network format\n\n\n\nNetwork Structure: Wars Startings in the 1000s\n\n Network attributes:\n  vertices = 117 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 153 \n    missing edges= 0 \n    non-missing edges= 153 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1100s\n\n Network attributes:\n  vertices = 78 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 225 \n    missing edges= 0 \n    non-missing edges= 225 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nNetwork Structure: Wars Startings in the 1200s\n\n Network attributes:\n  vertices = 161 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 313 \n    missing edges= 0 \n    non-missing edges= 313 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nQuestion: Describe and identify the nodes (including how many nodes are in the dataset)\nAnswer: Nodes or vertices in these datasets represent belligerents in wars throughout history, the involved parties in each conflict can be a nation, province, individual, or group so long as they are listed as involved in the conflict.\nQuestion: What constitutes a tie or edge (including how many ties, whether ties are directed/undirected and weighted/binary, and how to interpret the value of the tie if any)\nAnswer: A tie or edge in this dataset represents a war, this war can be between two nations or groups within a nation. These edges can represent a war that involved many more nations but are always tied to each and every party involved on both sides. These edges are directed and the direction indicates which side “won” the conflict.\nQuestion: Whether or not there are edge attributes that might be used to subset data or stack multiple networks (e.g., tie type, year, etc).\nAnswer: There are a number of attributes that could be used to subset the data, years that the conflict began or the length of time it lasted are available. Aspects like each side’s religion and the area where the conflict took place.\nCloseness Betweeness and Eigenvector Centrality\nQuestion: Calculate closeness, betweenness and eigenvector centrality measures for your network data, and bonachic-power if possible. Compare these measures to basic degree centrality measures. Try to interpret the results. Are there any interesting patterns in the distribution of measures or correlations between them that provide insight into the measures?\nCentralization: Wars Startings in the 1000s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nCounty of Apulia\n7\n0\n7\n0.000000\nCounty of Aversa\n5\n0\n5\n0.000000\nKingdom of Sicily\n8\n3\n5\n0.000000\nGhaznavids\n2\n0\n2\n0.000000\nKingdom of Poland\n1\n0\n1\n0.182744\nKingdom of Hungary\n3\n0\n3\n0.000000\n\n\n\n\n\n\n\n\n\ncentralization(wars_in_1000s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.1016647\n\ncentralization(wars_in_1000s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0494946\n\ncentralization(wars_in_1000s_network, degree) %>% kable()\n\n\nx\n0.0674663\n\nAs can be seen above I have coded measures of indegree, outdegree, and total centralization in the wars in the 1000s dataset.\nCentralization: Wars Startings in the 1100s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nSultanate of Rum\n23\n0\n23\n0.2893116\nDanishmends\n13\n0\n13\n0.0690251\nSeljuk Emirate of Aleppo\n13\n0\n13\n0.0690251\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\nFatimids of Egypt\n1\n0\n1\n0.0973860\nKingdom of Norway\n4\n0\n4\n0.0398827\n\n\n\n\n\n\n\n\n\ncentralization(wars_in_1100s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2646315\n\ncentralization(wars_in_1100s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.1593861\n\ncentralization(wars_in_1100s_network, degree) %>% kable()\n\n\nx\n0.1148325\n\nI do the same above and calculate measures of indegree, outdegree, and total centralization in the wars in the 1100s dataset.\nCentralization: Wars Startings in the 1200s\n\nname\ntotdegree\nindegree\noutdegree\neigen\nForces of Bohemond IV of Antioch\n3\n0\n3\n0.0000000\nKnights Templar\n22\n3\n19\n0.4663665\nAyyubid Emirate of Aleppo\n3\n0\n3\n0.0000000\nKingdom of Jerusalem\n3\n0\n3\n0.0000000\nSultanate of Rum\n3\n0\n3\n0.0000000\nHoly Roman Empire\n11\n6\n5\n0.1770181\n\n\n\n\n\n\n\n\n\ncentralization(wars_in_1200s_network, degree, cmode=\"outdegree\") %>% kable()\n\n\nx\n0.2016016\n\ncentralization(wars_in_1200s_network, degree, cmode=\"indegree\") %>% kable()\n\n\nx\n0.0758203\n\ncentralization(wars_in_1200s_network, degree) %>% kable()\n\n\nx\n0.1174332\n\nFinally I calculate measures of indegree, outdegree, and total centralization in the wars in the 1200s dataset.\nEigenvector Centralization\nQuestion: You may also want to identify whether the same node(s) are more/less central using the different measures, and see if you can find any patterns in the results based on which nodes are high/low on each measures. Discuss (with any related evidence) whether or not the node(s) behavior is in line with or violates expectations based on the degree centrality measure, comparing across those measures using a data frame similar to that constructed in the syntax. Be sure to share your assignment with group members for comments.\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nHoly Roman Empire\n12\n8\n4\n0.2303733\n0.0892857\n0.0205690\n0.9107143\n0.2098042\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Looking at the outputs above we see that regular eigenvector centrality, which accounts for the centrality of nodes attached to our node of interest. Here we see the top 5 highest observations in each dataset, in the 1000s the Byzantine Empire has the highest war, which is logical historically as they represented a bridge between major fighting factions in the Crusades between the Muslim Middle East and European west. The Kingdom of Jerusalem in the 1100s would also be connected, through its wars to other important powers being contested territory between Muslim empires like the Ayyubid Dynasty and crusading states like the Holy Roman Empire.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nHoly Roman Empire\n15\n2\n13\n0.295686\n1.0000000\n0.2956860\n0.0000000\n0.0000000\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nSultanate of Rum\n11\n7\n4\n0.295686\n0.1186441\n0.0350814\n0.8813559\n0.2606046\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\nKingdom of France\n10\n3\n7\n0.182744\n0.1034483\n0.0189046\n0.8965517\n0.1638394\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nFatimid Caliphate\n17\n7\n10\n0.2202864\n0.2884615\n0.0635442\n0.7115385\n0.1567423\nZengid Dynasty\n16\n6\n10\n0.2202864\n0.1714286\n0.0377634\n0.8285714\n0.1825230\nRepublic of Venice\n6\n1\n5\n0.0797655\n0.3333333\n0.0265885\n0.6666667\n0.0531770\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.rc\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nKingdom of Cyprus\n11\n4\n7\n0.2025283\n0.1428571\n0.0289326\n0.8571429\n0.1735957\nMongol Empire\n41\n7\n34\n0.2228895\n0.1206897\n0.0269005\n0.8793103\n0.1959891\n\nAnswer: Reflected centrality represents the centrality one nation receives from another another that is attributable to the first nations contribution to the other nations score. Looking at reflected centrality through wars we see relatively similar trends. In the 1000s the Holy Roman Empire and Byzantine Empire play a distinct role in the crusades so in this case we see how central a nation is in conflict dependent on how much centrality they contribute to a nation they have a conflict with. Being focal points in the center of Europe in the case of the HRE and the focal point of Christian, Muslim conflict in the case of the Byzantine empire. For both fighting minor nations gives the two a great deal of centrality to other, potentially less central groups that they fight. The Ayyubids and Kingdom of Jerusalem that each occupy a central position in conflict. Into the 1200s the Knights Templar and Ayyubids occupy this position.\n\n\narrange(wars_in_1000s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nByzantine Empire\n18\n5\n13\n0.478430\n0.3571429\n0.1708679\n0.6428571\n0.3075621\nMirdasid Emirate of Aleppo\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nDuklja\n1\n0\n1\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nGreat Seljuq Empire\n4\n0\n4\n0.295686\n0.0000000\n0.0000000\n1.0000000\n0.2956860\nKingdom of Georgia\n5\n1\n4\n0.295686\n0.0769231\n0.0227451\n0.9230769\n0.2729409\n\narrange(wars_in_1100s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKingdom of Jerusalem\n23\n11\n12\n0.5378974\n0.2980769\n0.1603348\n0.7019231\n0.3775626\nAyyubid Dynasty\n18\n10\n8\n0.5188525\n0.3200000\n0.1660328\n0.6800000\n0.3528197\nSultanate of Rum\n23\n0\n23\n0.2893116\n0.0000000\n0.0000000\n1.0000000\n0.2893116\nAlmoravid Dynasty\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\nAbbasid Caliphate\n10\n0\n10\n0.2202864\n0.0000000\n0.0000000\n1.0000000\n0.2202864\n\narrange(wars_in_1200s.nodes.stat, desc(eigen.dc\n\n))%>%\n  slice(1:5) %>% kable()\n\n\nname\ntotdegree\nindegree\noutdegree\neigen\nrc\neigen.rc\ndc\neigen.dc\nKnights Templar\n22\n3\n19\n0.4663665\n0.1428571\n0.0666238\n0.8571429\n0.3997427\nAyyubid Dynasty\n23\n9\n14\n0.4263748\n0.1046512\n0.0446206\n0.8953488\n0.3817542\nBahris\n7\n0\n7\n0.2911519\n0.0000000\n0.0000000\n1.0000000\n0.2911519\nRepublic of Genoa\n18\n5\n13\n0.2880895\n0.1428571\n0.0411556\n0.8571429\n0.2469339\nAnti-Imperial faction\n7\n0\n7\n0.2025283\n0.0000000\n0.0000000\n1.0000000\n0.2025283\n\nAnswer: Finally Derived Centrality measures the centrality a nation receives from fighting another nation that is not a reflection of the first nation’s contribution of centrality to the others. Here the Byzantine Empire remains one of the largest, potentially suggesting their status as a cosmopolitan being high in both derived and reflected centrality. However, nations like the Mirdasid Emirate of Aleppo have little to no reflected centrality by high derived centrality suggesting that they are are a pure bridge.\n\n\nwars_in_1000s.nodes<-data.frame(name=V(wars_in_1000s.ig)$name,\n    totdegree=igraph::degree(wars_in_1000s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1000s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1000s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1100s.nodes<-data.frame(name=V(wars_in_1100s.ig)$name,\n    totdegree=igraph::degree(wars_in_1100s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1100s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1100s.ig, mode=\"out\", loops=FALSE))\n\nwars_in_1200s.nodes<-data.frame(name=V(wars_in_1200s.ig)$name,\n    totdegree=igraph::degree(wars_in_1200s.ig, loops=FALSE),\n    indegree=igraph::degree(wars_in_1200s.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(wars_in_1200s.ig, mode=\"out\", loops=FALSE))\n\neigen_cent_wars_in_1000s<-centr_eigen(wars_in_1000s.ig,directed=T)\n\neigen_cent_wars_in_1100s<-centr_eigen(wars_in_1100s.ig,directed=T)\n\neigen_cent_wars_in_1200s<-centr_eigen(wars_in_1200s.ig,directed=T)\n\n\n\nSome Attempts at Visualization\nGraph 1:\nExplanation: Below I have graphed the network for the 1000s dataset using base plot and an edgelist\n\n\nplot(wars_in_1000s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 2:\nExplanation: Next I used the igraph network object and graphed it using the automatic, proportional clustering.\n\n\n\nGraph 3:\nExplanation: Finally I used the ggplot network and graphed it using a generic network object. This order follows for the visualization of the 1100s datasets and 1200s.\n\n\n\nGraph 4:\n\n\nplot(wars_in_1100s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 5:\n\n\n\nGraph 6:\n\n\n\nGraph 7:\n\n\nplot(wars_in_1200s_edgelist_network_edgelist, vertex.size=2,  edge.arrow.size=.2, vertex.color=\"gold\", vertex.size=20, vertex.frame.color=\"gray\", vertex.label.color=\"black\", vertex.label.cex=0.25, vertex.label.dist=2, edge.curved=0.2)\n\n\n\n\nGraph 8:\n\n\n\nGraph 9:\n\n\n\n\n$mut\n[1] 3\n\n$asym\n[1] 147\n\n$null\n[1] 6636\n\n\n [1] 243974  14792    744    288    149    129     11     28     13\n[10]      0      1      0      0      1      0      0\n\n\n[1] 0.06481481\n[1] 0.0774983\n[1] 0.093224\n\n\n[1] 0.01117686\n[1] 0.03698225\n[1] 0.01207515\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n                name degree\n15  Byzantine Empire     18\n25 Holy Roman Empire     15\n28  Sultanate of Rum     11\n47 Kingdom of France     10\n29  County of Sicily      9\n34           England      9\n\n\n     name               degree      \n Length:117         Min.   : 1.000  \n Class :character   1st Qu.: 1.000  \n Mode  :character   Median : 1.000  \n                    Mean   : 2.615  \n                    3rd Qu.: 3.000  \n                    Max.   :18.000  \n\n\n\n\n",
    "preview": "posts/2022-02-10-workwithmedievalnetworks/workwithmedievalnetworks_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2022-02-17T14:04:46-05:00",
    "input_file": "workwithmedievalnetworks.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-02-07-florentine-families-week-3-assignment/",
    "title": "Florentine Families Week 3 Assignment",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-02-07",
    "categories": [],
    "contents": "\n\n\n\n\n\nset.seed(1)\ncanvas_flow(colors = colorPalette(\"vrolik3\"), lines = 3000, lwd = 0.5,\n            iterations = 1000, stepmax = 0.1, angles = 'svm')\n\n\n\n# see ?canvas_flow for more input parameters of this function\n\n\n\nData Description:\n\n\ndata(flo, package=\"network\")\n\n\nstatted_florentine<-as.network(flo)\n\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\n\n\nplot(statted_florentine)\n\n\n\n\nNodes and Edges:\nAs can be seen from the graph and summary statistics above the florentine family dataset is made up of 40 edges and 16 vertices. Each vertex or node is a family in florence. Each edge, or tie represents a marriage between the two.\nAs a result the ties are not weighted, so they are binary. However, though the dataset labels the ties are directed, they are actually all mutual so in essence, the dataset does not measure marriaage “into” a family but simply uses a mutual directed tie for every set of families with a marriage between them.\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nAs can be seen from the code above the dyads within the dataset are either mutual or null, meaning that between any two nodes there are no asymmetric dyads despite the fact that the network is labeled as being directed.\n\n\nsna::triad.census(statted_florentine)\n\n\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\n[1,] 324   0 195    0    0    0    0    0    0    0  38    0    0\n     120C 210 300\n[1,]    0   0   3\n\nAs can be seen from the triad census above the types of triads in the dataset are 324 of the 003-type, 102 of the 102-type, 38 of the 201-type and 3 of the 300-type. The 324 of 003-type and 195 of the 102-type indicate that 519 of the 560 triads are vacuously transitive, the remaining 38 of the 201-type are intransitive and only the 3 300-types are transitive\nTransitivity\nAs can be seen in the code below indicates the the transitivity of the network as a whole is 0.1914894, which follows from the results above. This would indicate a relatively low rate of transitivity and thus low inter-connectedness of the nodes and potientally lower density overall.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nIsolates\nThough the code below indicates that there are 12 isolates in the network, the data from our plot suggests that this is likely untrue and due to the discrepancy between the un-directed true nature of the network and its label as directed as a network object.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nDensity\nAs indicated by the code chunk below network density here is 0.1666667 indicating that only 16.67% of possible ties in the network are made.\n\n\nnetwork.density(statted_florentine)\n\n\n[1] 0.1666667\n\nDegree and Interesting Results\nEach of the 16 node’s degrees are acquired from the code bellow in integer form, from the digits alone it is difficult to distinguish any sort of overall pattern in the data.\n\n\nsna::degree(statted_florentine)\n\n\n [1]  2  6  4  6  6  2  8  2 12  2  6  0  6  4  8  6\n\nBelow I create a data frame with the overall degree of each family.\n\n\nflorentine.nodes<-data.frame(name=statted_florentine%v%\"vertex.names\",\n                             degree=sna::degree(statted_florentine))\nflorentine.nodes\n\n\n           name degree\n1    Acciaiuoli      2\n2       Albizzi      6\n3     Barbadori      4\n4      Bischeri      6\n5    Castellani      6\n6        Ginori      2\n7      Guadagni      8\n8  Lamberteschi      2\n9        Medici     12\n10        Pazzi      2\n11      Peruzzi      6\n12        Pucci      0\n13      Ridolfi      6\n14     Salviati      4\n15      Strozzi      8\n16   Tornabuoni      6\n\nBelow I then calculate each individual nodes indegree and out-degree.\nNotewory Results\nUpon running the above code I realized that despite the network being labeled “directed” all of its ties were actually mutual and thus the in-degree and out-degree would be identical since marriage is considered mutual. Though this follows from the fact that are generally considered mutual it is interesting to observe that marriages are not considered “into” another family but are represented as a mutual, but directed ties between nodes in every case.\n\n\nsna::degree(statted_florentine, cmode=\"indegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nsna::degree(statted_florentine, cmode=\"outdegree\")\n\n\n [1] 1 3 2 3 3 1 4 1 6 1 3 0 3 2 4 3\n\nAs can be seen from the code above each node has identical in-degrees and out-degrees\n\n\nflorentine.nodes <- data.frame(name=statted_florentine%v%\"vertex.names\",\n    totdegree=sna::degree(statted_florentine),\n    indegree=sna::degree(statted_florentine, cmode=\"indegree\"),\n    outdegree=sna::degree(statted_florentine, cmode=\"outdegree\"))\n\nflorentine.nodes\n\n\n           name totdegree indegree outdegree\n1    Acciaiuoli         2        1         1\n2       Albizzi         6        3         3\n3     Barbadori         4        2         2\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n6        Ginori         2        1         1\n7      Guadagni         8        4         4\n8  Lamberteschi         2        1         1\n9        Medici        12        6         6\n10        Pazzi         2        1         1\n11      Peruzzi         6        3         3\n12        Pucci         0        0         0\n13      Ridolfi         6        3         3\n14     Salviati         4        2         2\n15      Strozzi         8        4         4\n16   Tornabuoni         6        3         3\n\nThe notion is confirmed by the degree summaries in the code below and the table above. In both cases all indicators are identical for both in-degree and out-degree and sum to the values seen in the total-degree column.\n\n\nsummary(florentine.nodes)\n\n\n     name             totdegree     indegree     outdegree  \n Length:16          Min.   : 0   Min.   :0.0   Min.   :0.0  \n Class :character   1st Qu.: 2   1st Qu.:1.0   1st Qu.:1.0  \n Mode  :character   Median : 6   Median :3.0   Median :3.0  \n                    Mean   : 5   Mean   :2.5   Mean   :2.5  \n                    3rd Qu.: 6   3rd Qu.:3.0   3rd Qu.:3.0  \n                    Max.   :12   Max.   :6.0   Max.   :6.0  \n\nHistograms of the distribution of the degrees also illustrate that the only difference between in-degree, out-degree, and total degree is that total degree has values twice as large for marriages but the same relative frequency.\n\n\nhist(florentine.nodes$totdegree, main=\"Florentine Marriages: Total Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$indegree, main=\"Florentine Marriages: In-Degrees\", xlab=\"Marriages\")\n\n\n\n\n\n\nhist(florentine.nodes$outdegree, main=\"Florentine Marriages: Out-Degrees\", xlab=\"Marriages\")\n\n\n\n\nThese results do make degree analysis ineffectual on the dataset, but offer some potential questions. Specifically it would be useful to look at dynamics of marriages “into” other families as this would have been important at the time. Though marriage is considered symmetric in this dataset it was often used in asymmetric ways during the medieval and renaissance times as a means of diplomacy and establishing goodwill between nobility and as a result the ties between the families are not necessarily symmetric in all cases. It would be interesting to see married into what families in terms of sex and birth status hierarchy i.e. first, second, third born, etc.\n\n\nflo_sorted_by_total_degree<-florentine.nodes[order(-florentine.nodes$totdegree),]\n\nflo_sorted_by_total_degree\n\n\n           name totdegree indegree outdegree\n9        Medici        12        6         6\n7      Guadagni         8        4         4\n15      Strozzi         8        4         4\n2       Albizzi         6        3         3\n4      Bischeri         6        3         3\n5    Castellani         6        3         3\n11      Peruzzi         6        3         3\n13      Ridolfi         6        3         3\n16   Tornabuoni         6        3         3\n3     Barbadori         4        2         2\n14     Salviati         4        2         2\n1    Acciaiuoli         2        1         1\n6        Ginori         2        1         1\n8  Lamberteschi         2        1         1\n10        Pazzi         2        1         1\n12        Pucci         0        0         0\n\nThe results above indicate that the medici family are the most “central” node in the network having the most marriages and thus the most in-degrees and out-degrees. The mean of these two degrees is 2.5 in the dataset thus they have more than double the average marriages, however 4 other families have just 2, while the pucci’s have no ties.\nThis also poses the question as to whether or not there are more families that could be included and what the criteria was for allowance in the florentine family data. In this case 4-6 marriages is the most common with 6 nodes having 4-6 marriages.\nThe least central are the Pucci family who are included in the dataset but have no edges or connections to others families by marriage. The Acciaiuoli, Ginori, Lamberteschi, and Pazzi all have 2 total ties, one in and one out representing a single marriage.\n\n\ncentralization(statted_florentine, degree, cmode=\"indegree\")\n\n\n[1] 0.2488889\n\nThe measure of centralization above represents how concentrated edges between nodes are concentrated among actors. He centralization is slightly less than 25% which would indicate that concentration is relatively low this follows from the low transitivity of the network as a whole, there very few actual connections as compared to the possible connections. As a result of these findings it appears as if the network is not extremely centralized with most families having 2-3 marriages with the largest only being 6. The network also has a low level of transitivity as most nodes are not connected to one another.\nHowever it is important to note that we do not know aspects certain aspects of the families that are relevant to understanding the extent of the network’s true connectivity, this could be heirs with ties to both families marriages and the number of marriages between families that happened out of the possible number afforded to each family by their number of heirs. Having family tree measurements would allow for more meaningful analysis that could make the network truly directed by seeing who married into what family and what they represented to their families in terms of succession including their effects in creating prior generations that continued these connections.\n\n\n\n",
    "preview": "posts/2022-02-07-florentine-families-week-3-assignment/florentine-families-week-3-assignment_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-10T20:32:18-05:00",
    "input_file": "florentine-families-week-3-assignment.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-31-homework2network/",
    "title": "Homework_2_Network",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\n\n\nlibrary(network)\n\nlibrary(igraph)\n\nlibrary(aRtsy)\n\n\n\n\n\nset.seed(1)\ncanvas_diamonds(colors = colorPalette(\"klimt\"))\n\n\n\n\n\n\ndata(flo, package=\"network\")\n\nmatrix <- as.matrix(flo) \n\nflorentine<- graph.adjacency(flo, mode=\"directed\", weighted=NULL)\n\n\nplot(florentine)\n\n\n\n\n\n\nvcount(florentine)\n\n\n[1] 16\n\necount(florentine)\n\n\n[1] 40\n\n\n\n\n",
    "preview": "posts/2022-01-31-homework2network/homework2network_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-01T13:11:48-05:00",
    "input_file": "homework2network.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-31-the-sharpe-ratio/",
    "title": "Initial Network Analysis Florentine Family",
    "description": "Homework 2: Brief Analysis of the Florentine Family Set",
    "author": [
      {
        "name": "Noah Milstein",
        "url": {}
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\n\n\n\n\n\n\nChosen Network:\nThe Network I chose was the Florentine family dataset network from the network package. This dataset represents marriages between influential families in Florence. Each node represents a family with arrows indicating which family married into which other family.\nNetwork Size:\nNetwork size for the Florentine Family network dataset is described briefly by the code below:\n\n\nset.seed(2)\n# I access the florentine families dataset through the package \"network\"\n\ndata(flo, package=\"network\")\n\n# In order to make the dataset usable I make it into a matrix using as.matrix()\n\nmatrix_florentine <- as.matrix(flo) \n\n# Next I used the graph.adjacency command to make the florentine dataset into\n# An Adjacency Matrix \n\nflorentine<- graph.adjacency(flo, mode=\"directed\", weighted=NULL)\n\nplot(florentine, vertex.color=\"skyblue1\", vertex.label.color=\"navy\", \n     vertex.label.dist=1, vertex.size=7,  edge.arrow.size=0.5, margin=0000)\n\n\n\n\n\n\nvcount(florentine)\n\n\n[1] 16\n\necount(florentine)\n\n\n[1] 40\n\n\n\nstatted_florentine<-as.network(matrix_florentine)\nprint(statted_florentine)\n\n\n Network attributes:\n  vertices = 16 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 40 \n    missing edges= 0 \n    non-missing edges= 40 \n\n Vertex attribute names: \n    vertex.names \n\nNo edge attributes\n\nThe number of vertices in the dataset is 16, in this case these nodes each represent a florentine family. Te number of edges is 40. In this instance ties or edges, represent marriages between these influential families. The is the same in both the statnet and igraph outputs.\nNetwork Features\nNext the features of the dataset are described using the 3 commands in the code chunk below.\n\n\nis_bipartite(florentine)\n\n\n[1] FALSE\n\nis_directed(florentine)\n\n\n[1] TRUE\n\nis_weighted(florentine)\n\n\n[1] FALSE\n\nThese results suggests that the florentine family dataset is not bipartite, which would indicate that they do not fall into to sets. In addition the dataset’s ties are directed do they flow in directions as a result of which family is marrying to which, and the ties are unweighted because marriage cannot vary in numerican significance, it is simply a category that is either true or false between families.\n\n\nvertex_attr_names(florentine)\n\n\n[1] \"name\"\n\nedge_attr_names(florentine)\n\n\ncharacter(0)\n\n\n\nnetwork::list.vertex.attributes(statted_florentine)\n\n\n[1] \"na\"           \"vertex.names\"\n\nnetwork::list.edge.attributes(statted_florentine)\n\n\n[1] \"na\"\n\nThe vector attribute names are the names of the florentine families.\nThe edge attributes do not have name.\nDyad and Triad Census\nDyads\n\n\nigraph::dyad.census(florentine)\n\n\n$mut\n[1] 20\n\n$asym\n[1] 0\n\n$null\n[1] 100\n\n\n\nsna::dyad.census(statted_florentine)\n\n\n     Mut Asym Null\n[1,]  20    0  100\n\nThe dyad census indicates that amongest that among the dyad ties, being between 2 families, 20 are mutual and none are asymptotic. In addition 100 of the dyad are null, or not connected.\nTriads\n\n\nigraph::triad_census(florentine)\n\n\n [1] 324   0 195   0   0   0   0   0   0   0  38   0   0   0   0   3\n\n?triad_census(florentine)\n\n\n\n\n\nsna::triad.census(statted_florentine, mode=\"graph\")\n\n\n       0   1  2 3\n[1,] 324 195 38 3\n\n\n\nsum(sna::triad.census(statted_florentine, mode=\"graph\"))\n\n\n[1] 560\n\nFor dyads there are 16 possibilities. Here our results are as follows:\n324, 003 (A,B,C, the empty graph.)\n195, 102 (A<->B, C, the graph with a mutual connection between two vertices.)\nboth of which are vacuously transitive\n38, 030C (A<-B<-C, A->C.)\n3, 300 (A<->B<->C, A<->C, the complete graph.)\nwhich are both transitive\nBoth statnet and igraph confirm this, however igraph specifies the exact instances of each type of connection.\nNetwork Transitivity\n\n\ntransitivity(florentine, type=\"global\")\n\n\n[1] 0.1914894\n\nThe global transitivity of the graph is 0.1914894 which is the ratio of triangles to connected triangles.\n\n\ntransitivity(florentine, type=\"average\")\n\n\n[1] 0.2181818\n\nThe average transitivity is the average transitivity of local triad clusters. Here it is 0.2181818. This is the ratio of local triangles to all connected triangles.\n\n\ngtrans(statted_florentine)\n\n\n[1] 0.1914894\n\nStatnet code confirms this transitivity assessment.\n\n\nV(florentine)[c(\"Peruzzi\",\"Lamberteschi\", \"Ginori\")]\n\n\n+ 3/16 vertices, named, from e7ac6d4:\n[1] Peruzzi      Lamberteschi Ginori      \n\nNetwork Distances\nFirst we see that the average path length between 2 nodes in our dataset is 2.485714\n\n\naverage.path.length(florentine,directed=F)\n\n\n[1] 2.485714\n\nI then test the distances between 3 families, those being the Peruzzi, Lamberteschi, and Ginori\n\n\ndistances(florentine,\"Peruzzi\", \"Lamberteschi\")\n\n\n        Lamberteschi\nPeruzzi            3\n\nThe distance between the nodes of Peruzzi and Lamberteschi is 3\n\n\ndistances(florentine,\"Peruzzi\", \"Ginori\")\n\n\n        Ginori\nPeruzzi      4\n\nThe distance between the nodes of Peruzzi and Ginori is 4\n\n\ndistances(florentine,\"Lamberteschi\",\"Ginori\")\n\n\n             Ginori\nLamberteschi      3\n\nThe distance between the nodes of Lamberteschi and Ginori is 3.\n\n\nisolates(statted_florentine)\n\n\n[1] 12\n\nThe names of all families in our dataset is as follows:\n\n\nas.vector(statted_florentine%v%'vertex.names')\n\n\n [1] \"Acciaiuoli\"   \"Albizzi\"      \"Barbadori\"    \"Bischeri\"    \n [5] \"Castellani\"   \"Ginori\"       \"Guadagni\"     \"Lamberteschi\"\n [9] \"Medici\"       \"Pazzi\"        \"Peruzzi\"      \"Pucci\"       \n[13] \"Ridolfi\"      \"Salviati\"     \"Strozzi\"      \"Tornabuoni\"  \n\nThe names of the isolated influential families is as follows below:\n\n\nas.vector(statted_florentine%v%'vertex.names')[c(isolates(statted_florentine))]\n\n\n[1] \"Pucci\"\n\n\n\n\n",
    "preview": "posts/2022-01-31-the-sharpe-ratio/Homework_2_Noah_Milstein_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-02-02T23:34:49-05:00",
    "input_file": "Homework_2_Noah_Milstein.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog!",
    "description": "This is my New blog for code relating to Political and Social Networks",
    "author": [
      {
        "name": "Noah Milstein",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/welcome/welcome_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2022-02-03T13:53:55-05:00",
    "input_file": "welcome.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  }
]
